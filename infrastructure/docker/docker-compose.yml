version: '3.8'

services:
  # MariaDB Database
  mariadb:
    image: mariadb:11.8
    platform: linux/arm64
    container_name: devsu-mariadb
    restart: unless-stopped
    environment:
      MARIADB_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MARIADB_DATABASE: ${DATABASE_NAME}
      MARIADB_USER: ${DATABASE_USER}
      MARIADB_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "${DATABASE_PORT:-3306}:3306"
    env_file:
      - ../../.env
    volumes:
      - mariadb_data:/var/lib/mysql
      - mariadb_logs:/var/log/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DATABASE_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  app:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile
      target: runner
      platforms:
        - linux/amd64
        - linux/arm64
    platform: linux/arm64
    container_name: devsu-nodejs-api
    ports:
      - "8000:8000"
    env_file:
      - ../../.env
    environment:
      - NODE_ENV=production
      - DATABASE_HOST=mariadb
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
    restart: unless-stopped
    depends_on:
      mariadb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8000/api/users', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  # Reverse proxy for production
  nginx:
    image: nginx:alpine
    platform: linux/arm64
    container_name: devsu-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - production

volumes:
  mariadb_data:
    driver: local
  mariadb_logs:
    driver: local
  app_data:
    driver: local
  app_logs:
    driver: local

networks:
  app-network:
    driver: bridge 