name: 🚀 Deploy to EKS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'prod'
        type: choice
        options:
          - staging
          - prod
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'latest'
      force_restart:
        description: 'Force restart deployment'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  # Namespace mapping will be set dynamically based on environment

jobs:
  deploy-eks:
    name: 🚀 Deploy to EKS
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set namespace
        run: |
          # Map environment to correct namespace name
          if [ "${{ inputs.environment }}" = "staging" ]; then
            echo "NAMESPACE=devsu-demo-staging" >> $GITHUB_ENV
          elif [ "${{ inputs.environment }}" = "prod" ]; then
            echo "NAMESPACE=devsu-demo-prod" >> $GITHUB_ENV
          else
            echo "NAMESPACE=devsu-demo-${{ inputs.environment }}" >> $GITHUB_ENV
          fi
          echo "Using namespace: $NAMESPACE"

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📦 Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: 🔗 Update kubeconfig for EKS
        run: |
          # Set cluster name based on environment
          if [ "${{ inputs.environment }}" = "prod" ]; then
            EKS_CLUSTER_NAME="devsu-demo-prod-eks"
          elif [ "${{ inputs.environment }}" = "staging" ]; then
            EKS_CLUSTER_NAME="devsu-demo-staging-eks"
          else
            EKS_CLUSTER_NAME="devsu-demo-${{ inputs.environment }}-eks"
          fi
          
          echo "Connecting to EKS cluster: $EKS_CLUSTER_NAME"
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name $EKS_CLUSTER_NAME

      - name: 🔍 Verify cluster connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: 📋 Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: 🔧 Apply Kubernetes manifests
        run: |
          # Apply ConfigMap
          kubectl apply -f infrastructure/k8s/${{ inputs.environment }}/configmap.yaml
          
          # Apply Secret (if exists)
          if [ -f "infrastructure/k8s/${{ inputs.environment }}/secret.yaml" ]; then
            kubectl apply -f infrastructure/k8s/${{ inputs.environment }}/secret.yaml
          fi
          
          # Apply Deployment
          kubectl apply -f infrastructure/k8s/${{ inputs.environment }}/deployment.yaml

      - name: 🐳 Update deployment with new image
        run: |
          # Update deployment with new image tag
          kubectl set image deployment/devsu-demo-app devsu-demo-app=${{ vars.DOCKER_USERNAME }}/devsu-demo:${{ inputs.image_tag }} -n ${{ env.NAMESPACE }}
          
          # Force restart if requested
          if [ "${{ inputs.force_restart }}" = "true" ]; then
            kubectl rollout restart deployment/devsu-demo-app -n ${{ env.NAMESPACE }}
          fi

      - name: 🔄 Wait for deployment rollout
        run: |
          kubectl rollout status deployment/devsu-demo-app -n ${{ env.NAMESPACE }} --timeout=600s

      - name: 📊 Verify deployment
        run: |
          echo "=== Pods Status ==="
          kubectl get pods -n ${{ env.NAMESPACE }}
          
          echo "=== Deployment Status ==="
          kubectl get deployment -n ${{ env.NAMESPACE }}

      - name: 🧪 Health check
        run: |
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l app=devsu-demo -n ${{ env.NAMESPACE }} --timeout=300s
          
          echo "✅ Pods are ready"

      - name: 📈 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag:** ${{ inputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Namespace:** ${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "**Cluster:** ${{ env.EKS_CLUSTER_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pods Status:" >> $GITHUB_STEP_SUMMARY
          kubectl get pods -n ${{ env.NAMESPACE }} -o wide >> $GITHUB_STEP_SUMMARY 