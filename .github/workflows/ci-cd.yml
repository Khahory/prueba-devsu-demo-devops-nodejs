name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v[0-9]{8}-*' ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: devsu-demo

jobs:
  # ===== CODE BUILD =====
  build:
    name: 🔨 Build
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

  # ===== UNIT TESTS =====
  test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: npm test

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml

  # ===== STATIC CODE ANALYSIS =====
  lint:
    name: 🔍 Code Analysis
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint || echo "ESLint not configured"

      - name: 🎯 Run Prettier check
        run: npm run format:check || echo "Prettier not configured"

  # ===== CODE COVERAGE =====
  coverage:
    name: 📊 Code Coverage
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 📊 Run tests with coverage
        run: npm run test:coverage

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # ===== VULNERABILITY SCAN =====
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🔒 Run npm audit
        run: npm audit --audit-level moderate

      - name: 🛡️ Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: false

  # ===== DOCKER BUILD & PUSH =====
  docker:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [ test, lint, coverage, security ]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          platforms: linux/amd64,linux/arm64

      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ vars.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
            ${{ vars.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDPLATFORM=${{ runner.os }}/${{ runner.arch }}
            TARGETPLATFORM=linux/arm64

      - name: 🔍 Verify ARM64 Image
        uses: ./.github/actions/verify-arm
        with:
          image_name: ${{ vars.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}
          image_tag: ${{ github.sha }}

  # ===== DEPLOYMENT =====
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: docker
    defaults:
      run:
        shell: bash -leo pipefail {0}
    steps:
      - name: 💻 Checkout current code ref
        uses: actions/checkout@v4

      - name: 📝 Set environment variables
        uses: ./.github/actions/set-env

      - name: 🚀 Run deployment tasks
        uses: ./.github/actions/deploy
        with:
          version: '${{ github.ref_name }}'
          environment: '${{ env.ENVIRONMENT }}'
          docker_username: ${{ vars.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_PASSWORD }} 