name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ${{ vars.DOCKER_USERNAME }}
  IMAGE_NAME: devsu-demo
  AWS_REGION: us-east-1

jobs:
  # ===== BUILD, TEST, LINT =====
  build-and-test:
    name: 🔨 Build & Test
    uses: ./.github/workflows/reusable-setup.yml
    with:
      node-version: '18'
      run-tests: true
      run-lint: true
      run-security-scan: true

  # ===== DOCKER BUILD & PUSH =====
  docker:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: build-and-test
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🔧 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===== DEPLOY TO STAGING =====
  deploy-staging:
    name: 📦 Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📦 Install kubectl
        uses: azure/setup-kubectl@v3

      - name: 🔗 Connect to EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name devsu-demo-stage-eks

      - name: 🚀 Deploy to staging
        run: |
          # Use the SHA short format (7 chars) to match Docker Hub tags
          SHORT_SHA=${GITHUB_SHA:0:7}
          IMAGE_TAG="main-${SHORT_SHA}"
          
          echo "Deploying image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
          
          # Update image in deployment
          kubectl set image deployment/devsu-demo-app \
            devsu-demo-app=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} \
            -n devsu-demo-staging
          
          # Wait for rollout
          kubectl rollout status deployment/devsu-demo-app -n devsu-demo-staging --timeout=300s
          
          # Verify deployment  
          kubectl get pods -n devsu-demo-staging

  # ===== DEPLOY TO PRODUCTION =====
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: docker
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📦 Install kubectl
        uses: azure/setup-kubectl@v3

      - name: 🔗 Connect to EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name devsu-demo-prod-eks

      - name: 🏗️ Initialize Production Infrastructure
        run: |
          # Initialize production K8s resources
          bash infrastructure/k8s/scripts/init-prod.sh

      - name: 🚀 Deploy to production
        run: |
          # Extract tag name and create image tag
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Deploying tag: $TAG_NAME"
          
          # Update image in deployment
          kubectl set image deployment/devsu-demo-app \
            devsu-demo-app=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG_NAME} \
            -n devsu-demo-prod
          
          # Wait for rollout
          kubectl rollout status deployment/devsu-demo-app -n devsu-demo-prod --timeout=600s

      - name: 🧪 Production Health Check
        run: |
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l app=devsu-demo -n devsu-demo-prod --timeout=300s
          echo "✅ Production deployment successful"

      - name: 📊 Production Summary
        run: |
          echo "## 🎉 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${GITHUB_REF#refs/tags/}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${GITHUB_REF#refs/tags/}" >> $GITHUB_STEP_SUMMARY
          echo "**Namespace:** devsu-demo-prod" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Current Status:" >> $GITHUB_STEP_SUMMARY
          kubectl get pods -n devsu-demo-prod -o wide >> $GITHUB_STEP_SUMMARY