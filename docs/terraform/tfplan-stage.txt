Running plan in HCP Terraform. Output will stream here. Pressing Ctrl-C
will stop streaming the logs, but will not stop the plan running remotely.

Preparing the remote plan...

To view this run in a browser, visit:
https://app.terraform.io/app/khahory-organization/devsu-demo-stage/runs/run-bhambsCrJiCi9F9s

Waiting for the plan to start...

Terraform v1.8.4
on linux_amd64
Initializing plugins and modules...
module.eks.data.aws_caller_identity.current: Refreshing...
module.eks.data.aws_caller_identity.current: Refresh complete after 0s [id=805400277843]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.eks.aws_eks_addon.coredns will be created
  + resource "aws_eks_addon" "coredns" {
      + addon_name                  = "coredns"
      + addon_version               = "v1.12.2-eksbuild.4"
      + arn                         = (known after apply)
      + cluster_name                = "devsu-demo-stage-eks"
      + configuration_values        = (known after apply)
      + created_at                  = (known after apply)
      + id                          = (known after apply)
      + modified_at                 = (known after apply)
      + region                      = "us-east-1"
      + resolve_conflicts_on_create = "OVERWRITE"
      + resolve_conflicts_on_update = "OVERWRITE"
      + tags_all                    = (known after apply)
    }

  # module.eks.aws_eks_addon.ebs_csi will be created
  + resource "aws_eks_addon" "ebs_csi" {
      + addon_name                  = "aws-ebs-csi-driver"
      + addon_version               = "v1.46.0-eksbuild.1"
      + arn                         = (known after apply)
      + cluster_name                = "devsu-demo-stage-eks"
      + configuration_values        = (known after apply)
      + created_at                  = (known after apply)
      + id                          = (known after apply)
      + modified_at                 = (known after apply)
      + region                      = "us-east-1"
      + resolve_conflicts_on_create = "OVERWRITE"
      + resolve_conflicts_on_update = "OVERWRITE"
      + service_account_role_arn    = (known after apply)
      + tags_all                    = (known after apply)
    }

  # module.eks.aws_eks_addon.kube_proxy will be created
  + resource "aws_eks_addon" "kube_proxy" {
      + addon_name                  = "kube-proxy"
      + addon_version               = "v1.33.0-eksbuild.2"
      + arn                         = (known after apply)
      + cluster_name                = "devsu-demo-stage-eks"
      + configuration_values        = (known after apply)
      + created_at                  = (known after apply)
      + id                          = (known after apply)
      + modified_at                 = (known after apply)
      + region                      = "us-east-1"
      + resolve_conflicts_on_create = "OVERWRITE"
      + resolve_conflicts_on_update = "OVERWRITE"
      + tags_all                    = (known after apply)
    }

  # module.eks.aws_eks_addon.vpc_cni will be created
  + resource "aws_eks_addon" "vpc_cni" {
      + addon_name                  = "vpc-cni"
      + addon_version               = "v1.20.0-eksbuild.1"
      + arn                         = (known after apply)
      + cluster_name                = "devsu-demo-stage-eks"
      + configuration_values        = (known after apply)
      + created_at                  = (known after apply)
      + id                          = (known after apply)
      + modified_at                 = (known after apply)
      + region                      = "us-east-1"
      + resolve_conflicts_on_create = "OVERWRITE"
      + resolve_conflicts_on_update = "OVERWRITE"
      + tags_all                    = (known after apply)
    }

  # module.eks.aws_eks_cluster.this will be created
  + resource "aws_eks_cluster" "this" {
      + arn                           = (known after apply)
      + bootstrap_self_managed_addons = true
      + certificate_authority         = (known after apply)
      + cluster_id                    = (known after apply)
      + created_at                    = (known after apply)
      + enabled_cluster_log_types     = [
          + "api",
          + "audit",
          + "authenticator",
          + "controllerManager",
          + "scheduler",
        ]
      + endpoint                      = (known after apply)
      + id                            = (known after apply)
      + identity                      = (known after apply)
      + name                          = "devsu-demo-stage-eks"
      + platform_version              = (known after apply)
      + region                        = "us-east-1"
      + role_arn                      = (known after apply)
      + status                        = (known after apply)
      + tags                          = {
          + "Create" = "Terraform"
          + "Env"    = "stage"
          + "Name"   = "devsu-demo-stage-eks-cluster"
          + "Owner"  = "Developers"
          + "Type"   = "eks-cluster"
        }
      + tags_all                      = {
          + "Create" = "Terraform"
          + "Env"    = "stage"
          + "Name"   = "devsu-demo-stage-eks-cluster"
          + "Owner"  = "Developers"
          + "Type"   = "eks-cluster"
        }
      + version                       = "1.33"

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = false
          + endpoint_public_access    = true
          + public_access_cidrs       = (known after apply)
          + security_group_ids        = (known after apply)
          + subnet_ids                = [
              + "subnet-02a2e55ee540b55ff",
              + "subnet-03c20fa52ba674879",
            ]
          + vpc_id                    = (known after apply)
        }
    }

  # module.eks.aws_eks_node_group.this will be created
  + resource "aws_eks_node_group" "this" {
      + ami_type               = "AL2023_ARM_64_STANDARD"
      + arn                    = (known after apply)
      + capacity_type          = "ON_DEMAND"
      + cluster_name           = "devsu-demo-stage-eks"
      + disk_size              = (known after apply)
      + id                     = (known after apply)
      + instance_types         = [
          + "t4g.medium",
        ]
      + labels                 = {
          + "env" = "stage"
        }
      + node_group_name        = "devsu-demo-stage-node-group"
      + node_group_name_prefix = (known after apply)
      + node_role_arn          = (known after apply)
      + region                 = "us-east-1"
      + release_version        = (known after apply)
      + resources              = (known after apply)
      + status                 = (known after apply)
      + subnet_ids             = [
          + "subnet-02a2e55ee540b55ff",
          + "subnet-03c20fa52ba674879",
        ]
      + tags                   = {
          + "Create" = "Terraform"
          + "Env"    = "stage"
          + "Name"   = "devsu-demo-stage-eks-node-group"
          + "Owner"  = "Developers"
          + "Type"   = "eks-node-group"
        }
      + tags_all               = {
          + "Create" = "Terraform"
          + "Env"    = "stage"
          + "Name"   = "devsu-demo-stage-eks-node-group"
          + "Owner"  = "Developers"
          + "Type"   = "eks-node-group"
        }
      + version                = "1.33"

      + scaling_config {
          + desired_size = 1
          + max_size     = 2
          + min_size     = 1
        }

      + update_config {
          + max_unavailable = 1
        }
    }

  # module.eks.aws_iam_role.ebs_csi_driver will be created
  + resource "aws_iam_role" "ebs_csi_driver" {
      + arn                   = (known after apply)
      + assume_role_policy    = (known after apply)
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "devsu-demo-stage-eks-ebs-csi-driver-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags                  = {
          + "Create" = "Terraform"
          + "Env"    = "stage"
          + "Name"   = "devsu-demo-stage-eks-cluster"
          + "Owner"  = "Developers"
          + "Type"   = "eks-cluster"
        }
      + tags_all              = {
          + "Create" = "Terraform"
          + "Env"    = "stage"
          + "Name"   = "devsu-demo-stage-eks-cluster"
          + "Owner"  = "Developers"
          + "Type"   = "eks-cluster"
        }
      + unique_id             = (known after apply)
    }

  # module.eks.aws_iam_role.eks_cluster will be created
  + resource "aws_iam_role" "eks_cluster" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "devsu-demo-stage-eks-cluster-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags                  = {
          + "Create" = "Terraform"
          + "Env"    = "stage"
          + "Name"   = "devsu-demo-stage-eks-cluster"
          + "Owner"  = "Developers"
          + "Type"   = "eks-cluster"
        }
      + tags_all              = {
          + "Create" = "Terraform"
          + "Env"    = "stage"
          + "Name"   = "devsu-demo-stage-eks-cluster"
          + "Owner"  = "Developers"
          + "Type"   = "eks-cluster"
        }
      + unique_id             = (known after apply)
    }

  # module.eks.aws_iam_role.eks_node_group will be created
  + resource "aws_iam_role" "eks_node_group" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "devsu-demo-stage-eks-node-group-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags                  = {
          + "Create" = "Terraform"
          + "Env"    = "stage"
          + "Name"   = "devsu-demo-stage-eks-node-group"
          + "Owner"  = "Developers"
          + "Type"   = "eks-node-group"
        }
      + tags_all              = {
          + "Create" = "Terraform"
          + "Env"    = "stage"
          + "Name"   = "devsu-demo-stage-eks-node-group"
          + "Owner"  = "Developers"
          + "Type"   = "eks-node-group"
        }
      + unique_id             = (known after apply)
    }

  # module.eks.aws_iam_role_policy_attachment.ebs_csi_driver_policy will be created
  + resource "aws_iam_role_policy_attachment" "ebs_csi_driver_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy"
      + role       = "devsu-demo-stage-eks-ebs-csi-driver-role"
    }

  # module.eks.aws_iam_role_policy_attachment.ec2_container_registry_read_only will be created
  + resource "aws_iam_role_policy_attachment" "ec2_container_registry_read_only" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = "devsu-demo-stage-eks-node-group-role"
    }

  # module.eks.aws_iam_role_policy_attachment.eks_cluster_policy will be created
  + resource "aws_iam_role_policy_attachment" "eks_cluster_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = "devsu-demo-stage-eks-cluster-role"
    }

  # module.eks.aws_iam_role_policy_attachment.eks_cni_policy will be created
  + resource "aws_iam_role_policy_attachment" "eks_cni_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = "devsu-demo-stage-eks-node-group-role"
    }

  # module.eks.aws_iam_role_policy_attachment.eks_vpc_resource_controller will be created
  + resource "aws_iam_role_policy_attachment" "eks_vpc_resource_controller" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      + role       = "devsu-demo-stage-eks-cluster-role"
    }

  # module.eks.aws_iam_role_policy_attachment.eks_worker_node_policy will be created
  + resource "aws_iam_role_policy_attachment" "eks_worker_node_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = "devsu-demo-stage-eks-node-group-role"
    }

  # module.eks.aws_security_group.eks_cluster will be created
  + resource "aws_security_group" "eks_cluster" {
      + arn                    = (known after apply)
      + description            = "EKS cluster security group"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "devsu-demo-stage-eks-cluster-"
      + owner_id               = (known after apply)
      + region                 = "us-east-1"
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Create" = "Terraform"
          + "Env"    = "stage"
          + "Name"   = "devsu-demo-stage-eks-cluster"
          + "Owner"  = "Developers"
          + "Type"   = "eks-cluster"
        }
      + tags_all               = {
          + "Create" = "Terraform"
          + "Env"    = "stage"
          + "Name"   = "devsu-demo-stage-eks-cluster"
          + "Owner"  = "Developers"
          + "Type"   = "eks-cluster"
        }
      + vpc_id                 = "vpc-08d0bf1a6fd73939b"
    }

  # module.eks.aws_security_group.eks_node_group will be created
  + resource "aws_security_group" "eks_node_group" {
      + arn                    = (known after apply)
      + description            = "EKS node group security group"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + from_port        = 1025
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 65535
                # (1 unchanged attribute hidden)
            },
          + {
              + cidr_blocks      = []
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 443
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = (known after apply)
      + name_prefix            = "devsu-demo-stage-eks-node-group-"
      + owner_id               = (known after apply)
      + region                 = "us-east-1"
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Create" = "Terraform"
          + "Env"    = "stage"
          + "Name"   = "devsu-demo-stage-eks-node-group"
          + "Owner"  = "Developers"
          + "Type"   = "eks-node-group"
        }
      + tags_all               = {
          + "Create" = "Terraform"
          + "Env"    = "stage"
          + "Name"   = "devsu-demo-stage-eks-node-group"
          + "Owner"  = "Developers"
          + "Type"   = "eks-node-group"
        }
      + vpc_id                 = "vpc-08d0bf1a6fd73939b"
    }

Plan: 17 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + eks_cluster_certificate_authority_data = (known after apply)
  + eks_cluster_endpoint                   = (known after apply)
  + eks_cluster_id                         = (known after apply)
  + eks_cluster_name                       = "devsu-demo-stage-eks"
  + eks_cluster_oidc_issuer_url            = (known after apply)
  + eks_cluster_version                    = "1.33"
  + eks_node_group_id                      = (known after apply)
  + eks_node_group_name                    = "devsu-demo-stage-node-group"

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
